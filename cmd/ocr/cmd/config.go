package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/MeKo-Tech/pogo/internal/config"
	"github.com/spf13/cobra"
	"gopkg.in/yaml.v3"
)

// configCmd represents the config command.
var configCmd = &cobra.Command{
	Use:   "config",
	Short: "Configuration management commands",
	Long: `Manage pogo configuration files and settings.

This command provides subcommands to:
- Generate default configuration files
- Validate existing configuration
- Show resolved configuration from all sources
- Display configuration information`,
}

// configInitCmd generates a default configuration file.
var configInitCmd = &cobra.Command{
	Use:   "init [filename]",
	Short: "Generate a default configuration file",
	Long: `Generate a default configuration file with all available settings documented.

If no filename is provided, it will create 'pogo.yaml' in the current directory.

Examples:
  pogo config init
  pogo config init my-config.yaml
  pogo config init ~/.config/pogo/pogo.yaml`,
	Args: cobra.MaximumNArgs(1),
	RunE: func(cmd *cobra.Command, args []string) error {
		filename := "pogo.yaml"
		if len(args) > 0 {
			filename = args[0]
		}

		// Create directory if it doesn't exist
		if dir := filepath.Dir(filename); dir != "." {
			if err := os.MkdirAll(dir, 0750); err != nil {
				return fmt.Errorf("failed to create directory %s: %w", dir, err)
			}
		}

		// Generate default configuration
		defaultConfig := config.DefaultConfig()

		// Write to file with comments
		file, err := os.Create(filename)
		if err != nil {
			return fmt.Errorf("failed to create config file: %w", err)
		}
		defer func() { _ = file.Close() }()

		// Write header comment
		if _, err := fmt.Fprintf(file, "# pogo configuration file\n"); err != nil {
			return fmt.Errorf("failed to write header: %w", err)
		}
		if _, err := fmt.Fprintf(file, "# Generated by: pogo config init\n"); err != nil {
			return fmt.Errorf("failed to write header: %w", err)
		}
		if _, err := fmt.Fprintf(file, "#\n"); err != nil {
			return fmt.Errorf("failed to write header: %w", err)
		}
		if _, err := fmt.Fprintf(file, "# This file contains all available configuration options with their default values.\n"); err != nil {
			return fmt.Errorf("failed to write header: %w", err)
		}
		if _, err := fmt.Fprintf(file, "# Uncomment and modify the values you want to change.\n"); err != nil {
			return fmt.Errorf("failed to write header: %w", err)
		}
		if _, err := fmt.Fprintf(file, "#\n"); err != nil {
			return fmt.Errorf("failed to write header: %w", err)
		}
		if _, err := fmt.Fprintf(file, "# Configuration precedence (highest to lowest):\n"); err != nil {
			return fmt.Errorf("failed to write header: %w", err)
		}
		if _, err := fmt.Fprintf(file, "# 1. Command-line flags\n"); err != nil {
			return fmt.Errorf("failed to write header: %w", err)
		}
		if _, err := fmt.Fprintf(file, "# 2. Environment variables (POGO_*)\n"); err != nil {
			return fmt.Errorf("failed to write header: %w", err)
		}
		if _, err := fmt.Fprintf(file, "# 3. Configuration file\n"); err != nil {
			return fmt.Errorf("failed to write header: %w", err)
		}
		if _, err := fmt.Fprintf(file, "# 4. Default values\n"); err != nil {
			return fmt.Errorf("failed to write header: %w", err)
		}
		if _, err := fmt.Fprintf(file, "\n"); err != nil {
			return fmt.Errorf("failed to write header: %w", err)
		}

		// Marshal to YAML
		encoder := yaml.NewEncoder(file)
		encoder.SetIndent(2)
		if err := encoder.Encode(defaultConfig); err != nil {
			return fmt.Errorf("failed to write config: %w", err)
		}

		fmt.Printf("Created configuration file: %s\n", filename)
		return nil
	},
}

// configValidateCmd validates the configuration.
var configValidateCmd = &cobra.Command{
	Use:   "validate [config-file]",
	Short: "Validate configuration file and settings",
	Long: `Validate the configuration file syntax and values.

If no config file is specified, it will validate the configuration
resolved from all sources (files, environment variables, defaults).

Examples:
  pogo config validate
  pogo config validate my-config.yaml
  pogo config validate --config /path/to/config.yaml`,
	Args: cobra.MaximumNArgs(1),
	RunE: func(cmd *cobra.Command, args []string) error {
		var cfg *config.Config
		var err error

		if len(args) > 0 {
			// Validate specific file
			loader := config.NewLoader()
			cfg, err := loader.LoadWithFile(args[0])
			if err != nil {
				return fmt.Errorf("validation failed: %w", err)
			}
			if err := cfg.Validate(); err != nil {
				return fmt.Errorf("validation failed: %w", err)
			}
			fmt.Printf("Configuration file %s is valid\n", args[0])
		} else {
			// Validate resolved configuration
			cfg = GetConfig()
			if err := cfg.Validate(); err != nil {
				return fmt.Errorf("configuration validation failed: %w", err)
			}
			fmt.Println("Configuration is valid")
		}

		// Show configuration source info
		loader := GetConfigLoader()
		if configFile := loader.GetConfigFileUsed(); configFile != "" {
			fmt.Printf("Configuration loaded from: %s\n", configFile)
		} else {
			fmt.Println("Configuration loaded from: defaults and environment variables")
		}

		return nil
	},
}

// configShowCmd displays the resolved configuration.
var configShowCmd = &cobra.Command{
	Use:   "show",
	Short: "Show resolved configuration from all sources",
	Long: `Display the final configuration after merging all sources:
- Configuration files
- Environment variables
- Command-line flags
- Default values

This shows exactly what configuration will be used when running commands.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		cfg := GetConfig()
		loader := GetConfigLoader()

		// Show configuration source
		if configFile := loader.GetConfigFileUsed(); configFile != "" {
			fmt.Printf("Configuration loaded from: %s\n", configFile)
		} else {
			fmt.Println("Configuration loaded from: defaults and environment variables")
		}
		fmt.Println()

		// Show search paths
		fmt.Printf("Configuration search paths:\n")
		for _, path := range config.GetConfigSearchPaths() {
			fmt.Printf("  - %s\n", path)
		}
		fmt.Println()

		// Show resolved configuration
		fmt.Println("Resolved configuration:")
		fmt.Println("=====================")

		encoder := yaml.NewEncoder(os.Stdout)
		encoder.SetIndent(2)
		if err := encoder.Encode(cfg); err != nil {
			return fmt.Errorf("failed to display configuration: %w", err)
		}

		return nil
	},
}

// configInfoCmd shows configuration system information.
var configInfoCmd = &cobra.Command{
	Use:   "info",
	Short: "Show configuration system information",
	Long: `Display information about the configuration system:
- Search paths for configuration files
- Environment variable prefix and naming
- Configuration file formats supported
- Current configuration source`,
	RunE: func(cmd *cobra.Command, args []string) error {
		loader := GetConfigLoader()

		fmt.Println("pogo Configuration System Information")
		fmt.Println("====================================")
		fmt.Println()

		fmt.Printf("Configuration file name: %s\n", config.ConfigFileName)
		fmt.Printf("Environment variable prefix: %s\n", config.EnvPrefix)
		fmt.Println()

		fmt.Printf("Supported formats: YAML, JSON, TOML, HCL, INI, Properties\n")
		fmt.Println()

		fmt.Printf("Search paths:\n")
		for i, path := range config.GetConfigSearchPaths() {
			fmt.Printf("  %d. %s/%s.{yaml,json,toml,...}\n", i+1, path, config.ConfigFileName)
		}
		fmt.Println()

		fmt.Printf("Environment variable examples:\n")
		fmt.Printf("  POGO_LOG_LEVEL=debug\n")
		fmt.Printf("  POGO_MODELS_DIR=/path/to/models\n")
		fmt.Printf("  POGO_PIPELINE_DETECTOR_DB_THRESH=0.3\n")
		fmt.Printf("  POGO_SERVER_PORT=9090\n")
		fmt.Printf("  POGO_GPU_ENABLED=true\n")
		fmt.Println()

		if configFile := loader.GetConfigFileUsed(); configFile != "" {
			fmt.Printf("Currently using: %s\n", configFile)
		} else {
			fmt.Println("Currently using: defaults and environment variables (no config file found)")
		}

		return nil
	},
}

func init() {
	// Add subcommands
	configCmd.AddCommand(configInitCmd)
	configCmd.AddCommand(configValidateCmd)
	configCmd.AddCommand(configShowCmd)
	configCmd.AddCommand(configInfoCmd)

	// Add to root command
	rootCmd.AddCommand(configCmd)
}
