version: "3.8"
services:
  pogo-ocr:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      args:
        VERSION: "${VERSION:-dev}"
        COMMIT: "${COMMIT:-unknown}"
        BUILD_DATE: "${BUILD_DATE:-$(date -u +%Y-%m-%dT%H:%M:%SZ)}"
    ports:
      - "8080:8080"
    environment:
      # Server configuration
      - POGO_SERVER_HOST=0.0.0.0
      - POGO_SERVER_PORT=8080
      - POGO_SERVER_CORS_ORIGIN=*
      - POGO_SERVER_MAX_UPLOAD_MB=50
      - POGO_SERVER_TIMEOUT_SEC=30
      - POGO_SERVER_SHUTDOWN_TIMEOUT=10
      # OCR configuration
      - POGO_MODELS_DIR=/usr/share/pogo/models
      - POGO_PIPELINE_RECOGNIZER_LANGUAGE=en
      - POGO_PIPELINE_DETECTOR_DB_BOX_THRESH=0.5
      - POGO_FEATURES_ORIENTATION_ENABLED=false
      - POGO_FEATURES_TEXTLINE_ENABLED=false
      # Logging
      - POGO_LOG_LEVEL=info
      - POGO_LOG_FORMAT=json
    volumes:
      # Optional: Mount custom models directory
      # - ./custom-models:/usr/share/pogo/models:ro

      # Optional: Mount configuration file
      # - ./config.yaml:/etc/pogo/config.yaml:ro

      # Optional: Mount for temporary files/cache
      - pogo-tmp:/tmp
    healthcheck:
      test: ["CMD", "/bin/pogo", "test"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "2.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    networks:
      - pogo-network
  # Optional: Reverse proxy with nginx
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - pogo-ocr
    networks:
      - pogo-network
    profiles:
      - proxy
volumes:
  pogo-tmp:
networks:
  pogo-network:
    driver: bridge
